# -*- coding: utf-8 -*-
"""lvadsusr73-Ashutosh- lab2-clustering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KUPDX7AKLQn5gZedLq-FlThvIlUdpgym
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from sklearn.preprocessing import OneHotEncoder, LabelEncoder
from sklearn.cluster import KMeans
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import silhouette_score
from yellowbrick.cluster import KElbowVisualizer
from scipy import stats

data=pd.read_csv('/content/Mall_Customers.csv')

data.shape

data.info()

data.head()

data.isnull().sum()

mean_income = data['Annual Income (k$)'].mean()
data['Annual Income (k$)'].fillna(mean_income, inplace=True)

data.isnull().sum()

x = data[['Age', 'Annual Income (k$)', 'Spending Score (1-100)']].values
scaler = StandardScaler()
x_scaled = scaler.fit_transform(x)
ev = KElbowVisualizer(KMeans(), k=(2, 11))
ev.fit(x_scaled)
ev.show()

silhouette_scores = []
for k in range(2, 11):
    kmeans = KMeans(n_clusters=k, random_state=42)
    cluster_labels = kmeans.fit_predict(x_scaled)
    silhouette_scores.append(silhouette_score(x_scaled, cluster_labels))

plt.figure(figsize=(8, 6))
plt.plot(range(2, 11), silhouette_scores, marker='o', linestyle='-')
plt.xlabel('Number of Clusters')
plt.ylabel('Silhouette Score')
plt.title('Silhouette Score Analysis')
plt.show()

numeric_cols = ['Age', 'Annual Income (k$)', 'Spending Score (1-100)']
data_zscore = data[numeric_cols].apply(stats.zscore)
threshold = 3
outliers = (data_zscore.abs() > threshold).any(axis=1)
for col in numeric_cols:
    mean_value = data.loc[~outliers, col].mean()
    data.loc[outliers, col] = mean_value

x = data[['Age', 'Annual Income (k$)', 'Spending Score (1-100)']].values
x_scaled = scaler.fit_transform(x)

k = 4
kmeans = KMeans(n_clusters=k, random_state=42)
cluster_labels = kmeans.fit_predict(x_scaled)
data['Cluster'] = cluster_labels

kmeans.fit(x_scaled)
centroids = kmeans.cluster_centers_
print("Centroids:")
print(centroids)

plt.scatter(x_scaled[:, 0], x_scaled[:, 1], c=cluster_labels, cmap='viridis')
plt.scatter(centroids[:, 0], centroids[:, 1], marker='*', s=300, c='r', label='Centroids')
plt.title('Customer Segmentation using K-means Clustering')
plt.xlabel('Age')
plt.ylabel('Annual Income (k$)')
plt.legend()
plt.show()

chara = data.groupby('Cluster').agg({
    'Age': ['mean', 'std', 'min', 'max'],
    'Annual Income (k$)': ['mean', 'std', 'min', 'max']
})

chara.columns = ['Age_mean', 'Age_std', 'Age_min', 'Age_max',
                                    'Income_mean', 'Income_std', 'Income_min', 'Income_max']


print("Cluster Characteristics:")
print(chara)